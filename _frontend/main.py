import streamlit as st
import pandas as pd
import plotly.express as px
import requests
import sqlite3
import joblib
import numpy as np
import pandas as pd
import streamlit as st
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut
from fonctions import fetch_data, paginate_data

st.set_page_config(
    page_title="PowerPredict",
    page_icon="üìä",
    layout="wide",
)

# Importer le CSS pour l'apparence
st.markdown(
    """
    <link href="./style.css" rel="stylesheet">
    """,
    unsafe_allow_html=True,
)

# Titres et descriptions de la page
st.title("üìä PowerPredict")
st.write("PowerPredict est un outil de visualisation de donn√©es de consommation d'√©nergie")

loading_html = """
<div style="text-align: center;">
    <img src="https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif" width="150px" alt="Chargement...">
    <p>Chargement des donn√©es, veuillez patienter...</p>
</div>
"""
loading_placeholder = st.markdown(loading_html, unsafe_allow_html=True)

# R√©cup√©ration des param√®tres de filtrage
nom_region = st.sidebar.text_input("Nom de la r√©gion")
nom_departement = st.sidebar.text_input("Nom du d√©partement")
annees_possibles = ["2020", "2021", "2022", "Ann√©e de r√©f√©rence"]
annee_consommation = st.sidebar.selectbox("Choisissez une option :", annees_possibles)
nombre_declaration = st.sidebar.number_input("Nombre de d√©clarations", min_value=0, step=1)
vecteur_energie = st.sidebar.text_input("vecteur energetique")
zone_climatique = st.sidebar.text_input("Zone climatique")
nom_commune = st.sidebar.text_input("Nom de la commune")
surface_declaree = st.sidebar.number_input("Surface d√©clar√©e", min_value=0, step=1)

# Mettre les param√®tres dans un dictionnaire
filters = {
    "region": nom_region,
    "departement": nom_departement,
    "annee_consommation": annee_consommation,
    "nombre_declaration": nombre_declaration,
    "vecteur_energie": vecteur_energie,
    "zone_climatique": zone_climatique,
    "commune": nom_commune,
    "surface_declaree": surface_declaree,
}

# Charger les donn√©es
if st.button("üì• R√©cup√©rer les donn√©es"):
    with st.spinner("Chargement des donn√©es..."):
        response = fetch_data(filters)
        
        if not response:
            st.error("üö® Impossible de r√©cup√©rer les donn√©es.")
        else:
            st.success("‚úÖ Donn√©es r√©cup√©r√©es avec succ√®s!")
            st.json(response)

    
    # Convertir la r√©ponse en DataFrame si elle est au format dictionnaire
    if isinstance(response, dict):
        table_data = pd.DataFrame([response]) if response else pd.DataFrame()
    elif isinstance(response, list):
        table_data = pd.DataFrame(response) if response else pd.DataFrame()
    else:
        table_data = pd.DataFrame()

    # S'assurer que table_data est d√©fini et non vide pour la pagination
    if filters and not table_data.empty:
        # Ajouter les valeurs des filtres comme nouvelles colonnes
        for key, value in filters.items():
            if value:  # Ajouter uniquement les valeurs non vides des filtres
                table_data[key] = value

        page_size = st.sidebar.slider(
            "Nombre de lignes par page", min_value=5, max_value=100, value=10, step=5
        )

        # Appeler paginate_data uniquement si table_data contient des lignes
        paginated_data = paginate_data(table_data, page_size)
        st.dataframe(paginated_data, use_container_width=True)

        # Affichage graphique des consommations par commune
        if "nom_commune" in table_data.columns and "consommation_declaree" in table_data.columns:
            st.subheader("Graphique des Consommations par Commune")

            # Cr√©ation du graphique
            fig = px.bar(
                table_data,
                x="nom_commune",
                y="consommation_declaree",
                color="consommation_declaree",
                color_continuous_scale=["green", "yellow", "red"],
                title="Consommation D√©clar√©e par Commune",
                labels={
                    "nom_commune": "Commune",
                    "consommation_declaree": "Consommation (kWh)"
                }
            )

            # Personnalisation du graphique
            fig.update_layout(
                title_font=dict(size=24),
                xaxis_title="Commune",
                yaxis_title="Consommation D√©clar√©e (kWh)",
                coloraxis_colorbar=dict(title="Consommation (kWh)")
            )

            # Afficher le graphique
            st.plotly_chart(fig, use_container_width=True)

        else:
            st.error("üö® Les colonnes n√©cessaires pour le graphique sont absentes.")


# Charger les mod√®les et les colonnes sauvegard√©es
gb_model = joblib.load("gradient_boosting_model.pkl")
all_features = joblib.load("all_features.pkl")

# Assurez-vous que all_features est une liste
if not isinstance(all_features, list):
    all_features = list(all_features)

# Initialiser le g√©ocodeur
geolocator = Nominatim(user_agent="geoapi")

# Fonction pour r√©cup√©rer les coordonn√©es GPS √† partir d'un nom de lieu
def get_coordinates(location_name):
    try:
        location = geolocator.geocode(location_name, country_codes="FR")
        if location:
            return location.latitude, location.longitude
        else:
            return None, None
    except GeocoderTimedOut:
        return None, None

# Ajout des entr√©es de pr√©diction dans la barre lat√©rale
st.sidebar.header("Faire une pr√©diction")
with st.sidebar.form(key="prediction_form"):
    surface_declaree = st.number_input("Surface d√©clar√©e (en m¬≤)", min_value=0, step=1)
    commune = st.text_input("Commune")
    annee_consommation = st.selectbox("Ann√©e de consommation", ["2020", "2021", "2022"])
    vecteur_energie = st.text_input("Vecteur √©nerg√©tique")
    prediction_button = st.form_submit_button("üìà Pr√©dire")

# Si le bouton est cliqu√©
if prediction_button:
    if not (surface_declaree and commune and annee_consommation and vecteur_energie):
        st.error("üö® Veuillez remplir toutes les informations pour effectuer une pr√©diction.")
    else:
        st.info("‚è≥ Calcul des coordonn√©es pour la commune...")
        latitude, longitude = get_coordinates(commune)
        
        if latitude is None or longitude is None:
            st.error("üö® Impossible de trouver la localisation. Veuillez v√©rifier le nom de la commune.")
        else:
            # Pr√©paration des donn√©es d'entr√©e
            input_data = {
                "surface_declaree": surface_declaree,
                "latitude": latitude,
                "longitude": longitude,
                "annee_consommation": int(annee_consommation),
                "vecteur_energie": vecteur_energie,
            }

            # Ajouter les colonnes manquantes avec des valeurs par d√©faut
            for feature in all_features:
                if feature not in input_data:
                    input_data[feature] = 0  # Valeur par d√©faut

            # Convertir en DataFrame et aligner les colonnes avec all_features
            input_data_df = pd.DataFrame([input_data])  # Cr√©er le DataFrame
            input_data_df = input_data_df.reindex(columns=all_features)  # R√©ordonner les colonnes

            # V√©rification des colonnes
            if not all(input_data_df.columns == all_features):
                st.error("üö® Erreur : les colonnes ne correspondent pas aux features attendues.")
            else:
                # Effectuer la pr√©diction
                try:
                    prediction = gb_model.predict(input_data_df)
                    prediction_original = np.expm1(prediction)[0]

                    st.success("‚úÖ Pr√©diction effectu√©e avec succ√®s!")
                    st.write(f"Consommation pr√©dite pour la commune {commune}: **{prediction_original:,.2f} kWh**")

                except Exception as e:
                    st.error(f"üö® Une erreur est survenue lors de la pr√©diction : {e}")
