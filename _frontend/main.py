import streamlit as st
import pandas as pd
import plotly.express as px
import requests

# Configuration de la page
st.set_page_config(
    page_title="PowerPredict",
    page_icon="üìä",
    layout="wide",
)

# Fonction pour v√©rifier la sant√© de l'API
def check_api_health():
    try:
        response = requests.get(f"{API_BASE_URL}/health")
        if response.status_code == 200:
            return "OK"
        else:
            return f"Erreur: {response.status_code}"
    except Exception as e:
        return f"Erreur: {e}"

# Titres de la page
st.title("üìä PowerPredict")
st.write("Analyse et pr√©diction de la consommation √©nerg√©tique.")

# URL de l'API
API_BASE_URL = "https://powerpredict.onrender.com"

# Bouton "R√©veiller l'API"
with st.spinner("V√©rification de l'API..."):
    if st.button("üîÑ R√©veiller l'API"):
        with st.spinner("En attente de la r√©ponse de l'API..."):
            health_status = check_api_health()
        if health_status == "OK":
            st.success("‚úÖ API r√©veill√©e avec succ√®s!")
        else:
            st.error(f"üö® Probl√®me avec l'API: {health_status}")

# Bloc 1 : Visualisation des donn√©es
st.header("üîç Visualisation des donn√©es")
with st.form(key="data_form"):
    st.sidebar.subheader("Filtres")
    annee_consommation = st.sidebar.selectbox("Ann√©e de consommation", ["2020", "2021", "2022"])
    vecteur_energie = st.sidebar.text_input("Vecteur √©nerg√©tique")
    zone_climatique = st.sidebar.text_input("Zone Climatique")
    commune = st.sidebar.text_input("Nom de la commune")
    departement = st.sidebar.text_input("Nom du d√©partement")
    region = st.sidebar.text_input("Nom de la r√©gion")
    consommation_etat = st.sidebar.text_input("Etat consommation")

    # Filtrer les donn√©es
    data_submit = st.form_submit_button("üì• Charger les donn√©es")
    if data_submit:
        with st.spinner("Chargement des donn√©es..."):
            filters = {
                "annee_consommation": annee_consommation,
                "vecteur_energie": vecteur_energie,
                "zone_climatique": zone_climatique,
                "commune": commune,
                "departement": departement,
                "region": region,
                "consommation_etat": consommation_etat,
            }
            valid_filters = {key: value for key, value in filters.items() if value}
            try:
                response = requests.get(f"{API_BASE_URL}/data", params=valid_filters)
                if response.status_code == 200:
                    data = response.json()["data"]
                    st.success("‚úÖ Donn√©es r√©cup√©r√©es avec succ√®s!")
                    df = pd.DataFrame(data)

                    # Affichage du tableau de donn√©es
                    st.dataframe(df)

                    # Affichage graphique des consommations
                    if "nom_commune" in df.columns and "consommation_declaree" in df.columns:
                        fig = px.bar(
                            df,
                            x="nom_commune",
                            y="consommation_declaree",
                            color="consommation_declaree",
                            title="Consommation par commune",
                            labels={"nom_commune": "Commune", "consommation_declaree": "Consommation (kWh)"},
                        )
                        st.plotly_chart(fig)
                else:
                    st.error(f"üö® Erreur: {response.json().get('detail', 'Impossible de r√©cup√©rer les donn√©es.')}")
            except Exception as e:
                st.error(f"üö® Une erreur est survenue : {e}")

# Bloc 2 : Pr√©dictions
st.header("üìà Pr√©dictions de consommation")
with st.form(key="predict_form"):
    st.sidebar.subheader("Donn√©es de pr√©diction")
    surface_declaree = st.sidebar.number_input("Surface d√©clar√©e (m¬≤)", min_value=1, step=1)
    commune = st.sidebar.text_input("Commune")
    annee_consommation = st.sidebar.text_input("Ann√©e de consommation")
    vecteur_energie = st.sidebar.text_input("Vecteur √©nerg√©tique (Fioul, √©lectricit√© ou gaz)")

    # Bouton de soumission
    predict_submit = st.form_submit_button("üîÆ Pr√©dire")
    if predict_submit:
        with st.spinner("Calcul de la pr√©diction..."):
            # Pr√©paration des donn√©es au format attendu par l'API
            prediction_input = {
                "surface_declaree": surface_declaree,
                "location_name": commune,
                "annee_consommation": annee_consommation,
                "vecteur_energie": vecteur_energie,
            }

            try:
                # Appel √† l'API pour effectuer la pr√©diction
                response = requests.get(f"{API_BASE_URL}/predict", params=prediction_input)

                if response.status_code == 200:
                    prediction = response.json()
                    st.success("‚úÖ Pr√©diction effectu√©e avec succ√®s!")

                    # Affichage des r√©sultats
                    st.write(f"### Mod√®le utilis√© : **{prediction['Mod√®le utilis√©']}**")
                    st.write(f"### Consommation estim√©e : **{prediction['Pr√©diction (kWh)']} kWh**")
                else:
                    # Gestion des erreurs API
                    st.error(f"üö® Erreur: {response.json().get('detail', 'Impossible d‚Äôeffectuer la pr√©diction.')}")

            except Exception as e:
                st.error(f"üö® Une erreur est survenue : {e}")
